<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Chat</title>
    <link rel="stylesheet" href="/styles/styles.css">
</head>
<body>
<div id="topNav">
    <a href="/">home</a>
    <a href="/users">users</a>
    <a href="/characters">characters</a>
    <a href="/register">register</a>
    <a href="/login">login</a>
    <a href="/logout">logout</a>
    <a href="/chat">chat</a>
</div>
<div class="container">
    <div class="canvas-container">
        <div class="image-container">
            <div id="mapContainer">
                <canvas id="mapCanvas" width="800" height="500"></canvas>
            </div>
        </div>
    </div>
    <div class="chat-container">
        <div id="content">
            <h1>Welcome, <%= username %></h1>

            <div id="messages-container">
                <div id="messages"></div>
            </div>
            <input id="text" type="text">
            <input id="currentRoom" type="hidden">
            <button onclick="sendMyMessage()">Send</button>
        </div>
    </div>
</div>

<script>
    const canvas = document.getElementById('mapCanvas');
    const ctx = canvas.getContext('2d');
    const roomSpots = [
        { name: 'fire', loc_x: 100, loc_y: 240 },
        { name: 'air', loc_x: 720, loc_y: 300 },
        { name: 'water', loc_x: 390, loc_y: 410 },
        { name: 'earth', loc_x: 592, loc_y: 158 },
        { name: 'cabbage', loc_x: 330, loc_y: 140 }
    ];

    const map = new Image(570, 321);
    map.src = '/pictures/map.jpg';

    canvas.addEventListener('mousemove', handleMousemove);
    canvas.addEventListener('click', handleClick);

    function drawMap() {
        ctx.drawImage(map, 0, 0, canvas.width, canvas.height);

        roomSpots.forEach(room => {
            const { loc_x, loc_y, name } = room;

            ctx.beginPath();
            ctx.shadowBlur = 10;
            ctx.shadowColor = '#ffffff';

            ctx.arc(loc_x, loc_y, 10, 0, 2 * Math.PI);
            ctx.lineWidth = 2;
            ctx.strokeStyle = '#2d2d2d';

            switch (name) {
                case 'fire':
                    ctx.fillStyle = '#ff2525'; // Red
                    break;
                case 'air':
                    ctx.fillStyle = '#ffffff'; // Gray
                    break;
                case 'water':
                    ctx.fillStyle = '#1818da'; // Blue
                    break;
                case 'earth':
                    ctx.fillStyle = '#d97635'; // Brown
                    break;
                case 'cabbage':
                    ctx.fillStyle = '#14c92c'; // Green
                    break;
                default:
                    ctx.fillStyle = '#6e6e6e'; // Default gray
                    break;
            }

            ctx.fill();
            ctx.stroke();
        });
    }

    function handleClick(event) {
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;

        roomSpots.forEach(room => {
            if (x > room.loc_x - 10 && x < room.loc_x + 10 && y > room.loc_y - 10 && y < room.loc_y + 10) {
                join(room.name);
            }
        });
    }

    function handleMousemove(event) {
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawMap();

        roomSpots.forEach(room => {
            if (x > room.loc_x - 10 && x < room.loc_x + 10 && y > room.loc_y - 10 && y < room.loc_y + 10) {
                ctx.beginPath();
                ctx.strokeStyle = '#ffffff';
                ctx.arc(room.loc_x, room.loc_y, 15, 0, 2 * Math.PI);
                ctx.fillStyle = '#282828';
                ctx.font = '30px Arial';
                ctx.strokeText(room.name, room.loc_x + 15, room.loc_y);
                ctx.fillText(room.name, room.loc_x + 15, room.loc_y);
                ctx.lineWidth = 2;
                ctx.stroke();
            }
        });
    }

    map.onload = function () {
        drawMap();
    };

    const ws = new WebSocket('ws://localhost:8080');
    const username = '<%= username %>';
    let currentRoom = '';

    ws.onopen = function () {
        console.log('websocket connection established');
        ws.send(JSON.stringify({
            message: 'hello from client',
            room: '',
            username: 'client'
        }));
    };

    ws.onmessage = function (ev) {
        console.log(ev);
        addTextMessage(JSON.parse(ev.data));
    };

    function sendMyMessage() {
        let text = document.getElementById('text').value;
        let room = currentRoom;

        if (room) {
            let message = {
                message: text,
                room: room,
                username: username,
            };
            ws.send(JSON.stringify(message));
        } else {
            alert('Please join a room before sending a message.');
        }
    }

    function addTextMessage(message) {
        let tag = document.createElement('p');
        tag.innerHTML = `<strong>${message.username}: </strong>${message.message}`;
        document.getElementById('messages').appendChild(tag);

        const messagesContainer = document.getElementById('messages-container');
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function join(room) {
        currentRoom = room;
        document.getElementById('currentRoom').value = room;
        document.getElementById('messages').innerHTML = '';

        ws.send(JSON.stringify({
            joinRoom: room
        }));

        let message = {
            message: `<i>entered the ${room} chat</i>`,
            room: room,
            username: username,
        };
        ws.send(JSON.stringify(message));
    }
</script>

</body>
</html>
